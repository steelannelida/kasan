Kernel address sanitizer
================

0. Overview
===========

Kernel Address sanitizer (KASan) is a dynamic memory error detector. It provides
a fast and comprehensive solution for finding use-after-free and out-of-bounds
bugs.

KASan uses compile-time instrumentation for checking every memory access,
therefore you will need a certain version of GCC > 4.9.2

Currently KASan is supported only for x86_64 architecture and requires that the
kernel be built with the SLUB allocator.

1. Usage
=========

To enable KASAN configure kernel with:

	  CONFIG_KASAN = y

and choose between CONFIG_KASAN_OUTLINE and CONFIG_KASAN_INLINE. Outline/inline
is compiler instrumentation types. The former produces smaller binary the
latter is 1.1 - 2 times faster. Inline instrumentation requires GCC 5.0 or
latter.

Currently KASAN works only with the SLUB and SLAB memory allocators.

To disable instrumentation for specific files or directories, add a line
similar to the following to the respective kernel Makefile:

        For a single file (e.g. main.o):
                KASAN_SANITIZE_main.o := n

        For all files in one directory:
                KASAN_SANITIZE := n

1.1 Error reports
==========

A typical out of bounds access report looks like this:
 ==================================================================
 BUG: KASan: out of bounds access in kmalloc_oob_right+0xce/0x117 [test_kasan] at addr ffff8800b91250fb
 Read of size 1 by task insmod/2754
 CPU: 0 PID: 2754 Comm: insmod Not tainted 4.0.0-rc4+ #1
 Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
  ffff8800b9125080 ffff8800b9aff958 ffffffff82c97b9e 0000000000000022
  ffff8800b9affa00 ffff8800b9aff9e8 ffffffff813fc8c9 ffff8800b9aff988
  ffffffff813fb3ff ffff8800b9aff998 0000000000000296 000000000000007b
 Call Trace:
  [<ffffffff82c97b9e>] dump_stack+0x45/0x57
  [<ffffffff813fc8c9>] kasan_report_error+0x129/0x420
  [<ffffffff813fb3ff>] ? kasan_poison_shadow+0x2f/0x40
  [<ffffffff813fb3ff>] ? kasan_poison_shadow+0x2f/0x40
  [<ffffffff813fbeff>] ? kasan_kmalloc+0x5f/0x100
  [<ffffffffa0008f3d>] ? kmalloc_node_oob_right+0x11f/0x11f [test_kasan]
  [<ffffffff813fcc05>] __asan_report_load1_noabort+0x45/0x50
  [<ffffffffa0008f00>] ? kmalloc_node_oob_right+0xe2/0x11f [test_kasan]
  [<ffffffffa00087bf>] ? kmalloc_oob_right+0xce/0x117 [test_kasan]
  [<ffffffffa00087bf>] kmalloc_oob_right+0xce/0x117 [test_kasan]
  [<ffffffffa00086f1>] ? kmalloc_oob_left+0xe9/0xe9 [test_kasan]
  [<ffffffff819cc140>] ? kvasprintf+0xf0/0xf0
  [<ffffffffa00086f1>] ? kmalloc_oob_left+0xe9/0xe9 [test_kasan]
  [<ffffffffa000001e>] run_test+0x1e/0x40 [test_kasan]
  [<ffffffffa0008f54>] init_module+0x17/0x128 [test_kasan]
  [<ffffffff81000351>] do_one_initcall+0x111/0x2b0
  [<ffffffff81000240>] ? try_to_run_init_process+0x40/0x40
  [<ffffffff813fb3ff>] ? kasan_poison_shadow+0x2f/0x40
  [<ffffffff813fbeff>] ? kasan_kmalloc+0x5f/0x100
  [<ffffffff813fb3ff>] ? kasan_poison_shadow+0x2f/0x40
  [<ffffffff813fbde4>] ? kasan_unpoison_shadow+0x14/0x40
  [<ffffffff813fb3ff>] ? kasan_poison_shadow+0x2f/0x40
  [<ffffffff813fbe80>] ? __asan_register_globals+0x70/0x90
  [<ffffffff82c934a4>] do_init_module+0x1d2/0x531
  [<ffffffff8122d5bf>] load_module+0x55cf/0x73e0
  [<ffffffff81224020>] ? symbol_put_addr+0x50/0x50
  [<ffffffff81227ff0>] ? module_frob_arch_sections+0x20/0x20
  [<ffffffff810c213a>] ? trace_do_page_fault+0x6a/0x1d0
  [<ffffffff810b5454>] ? do_async_page_fault+0x14/0x80
  [<ffffffff82cb0c88>] ? async_page_fault+0x28/0x30
  [<ffffffff8122f4da>] SyS_init_module+0x10a/0x140
  [<ffffffff8122f3d0>] ? load_module+0x73e0/0x73e0
  [<ffffffff82caef89>] system_call_fastpath+0x12/0x17
 Object at ffff8800b9125080, in cache kmalloc-128
 Object allocated with size 123 bytes.
 Allocation:
 PID = 2754, CPU = 0, timestamp = 4294707705
 Memory state around the buggy address:
  ffff8800b9124f80: fc fc fc fc fc fc fc fc 00 00 00 00 00 00 00 00
  ffff8800b9125000: 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc
 >ffff8800b9125080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03
                                                                 ^
  ffff8800b9125100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  ffff8800b9125180: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
 ==================================================================

In the last section the report shows memory state around the accessed address.
Reading this part requires some more understanding of how KASAN works.

Each 8 bytes of memory are encoded in one shadow byte as accessible,
partially accessible, freed or they can be part of a redzone.
We use the following encoding for each shadow byte: 0 means that all 8 bytes
of the corresponding memory region are accessible; number N (1 <= N <= 7) means
that the first N bytes are accessible, and other (8 - N) bytes are not;
any negative value indicates that the entire 8-byte word is inaccessible.
We use different negative values to distinguish between different kinds of
inaccessible memory like redzones or freed memory (see mm/kasan/kasan.h).

In the report above the arrows point to the shadow byte 03, which means that
the accessed address is partially accessible.


2. Implementation details
========================

From a high level, our approach to memory error detection is similar to that
of kmemcheck: use shadow memory to record whether each byte of memory is safe
to access, and use compile-time instrumentation to check shadow memory on each
memory access.

AddressSanitizer dedicates 1/8 of kernel memory to its shadow memory
(e.g. 16TB to cover 128TB on x86_64) and uses direct mapping with a scale and
offset to translate a memory address to its corresponding shadow address.

Here is the function witch translate an address to its corresponding shadow
address:

static inline void *kasan_mem_to_shadow(const void *addr)
{
	return ((unsigned long)addr >> KASAN_SHADOW_SCALE_SHIFT)
		+ KASAN_SHADOW_OFFSET;
}

where KASAN_SHADOW_SCALE_SHIFT = 3.

Compile-time instrumentation used for checking memory accesses. Compiler inserts
function calls (__asan_load*(addr), __asan_store*(addr)) before each memory
access of size 1, 2, 4, 8 or 16. These functions check whether memory access is
valid or not by checking corresponding shadow memory.

GCC 5.0 has possibility to perform inline instrumentation. Instead of making
function calls GCC directly inserts the code to check the shadow memory.
This option significantly enlarges kernel but it gives x1.1-x2 performance
boost over outline instrumented kernel.
